//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.PsiPlugin.Parsing;
namespace JetBrains.ReSharper.PsiPlugin.Tree.Impl {
  internal partial class OptionDefinition : PsiCompositeElement, JetBrains.ReSharper.PsiPlugin.Tree.IOptionDefinition {
    public const short PSI_OPTION_NAME= ChildRole.LAST + 1;
    public const short PSI_OPTION_IDENTIFIER_VALUE= ChildRole.LAST + 2;
    public const short PSI_OPTION_STRING_VALUE= ChildRole.LAST + 3;
    public const short PSI_OPTION_INTEGER_VALUE= ChildRole.LAST + 4;
    internal OptionDefinition() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_DEFINITION; }
    }
    public override void Accept(JetBrains.ReSharper.PsiPlugin.Tree.TreeNodeVisitor visitor) {
      visitor.VisitOptionDefinition(this);
    }
    public override void Accept<TContext>(JetBrains.ReSharper.PsiPlugin.Tree.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitOptionDefinition(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.PsiPlugin.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitOptionDefinition(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_STRING_VALUE, PSI_OPTION_STRING_VALUE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_NAME, PSI_OPTION_NAME),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER, PSI_OPTION_IDENTIFIER_VALUE),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL, PSI_OPTION_INTEGER_VALUE),
      }
    );
    public override short GetChildRole (JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual  JetBrains.ReSharper.Psi.Tree.ITokenNode OptionIdentifierValue {
      get
      {
        CompositeElement current = this;  
    
        JetBrains.ReSharper.Psi.Tree.ITokenNode result = null;
        TreeElement current0 = current.FindChildByRole (JetBrains.ReSharper.PsiPlugin.Tree.Impl.OptionDefinition.PSI_OPTION_IDENTIFIER_VALUE);
        if (current0 != null) {
          result = (JetBrains.ReSharper.Psi.Tree.ITokenNode) current0;
        }
        return result;
      }
    }
    public virtual  JetBrains.ReSharper.Psi.Tree.ITokenNode OptionIntegerValue {
      get
      {
        CompositeElement current = this;  
    
        JetBrains.ReSharper.Psi.Tree.ITokenNode result = null;
        TreeElement current0 = current.FindChildByRole (JetBrains.ReSharper.PsiPlugin.Tree.Impl.OptionDefinition.PSI_OPTION_INTEGER_VALUE);
        if (current0 != null) {
          result = (JetBrains.ReSharper.Psi.Tree.ITokenNode) current0;
        }
        return result;
      }
    }
    public virtual  JetBrains.ReSharper.PsiPlugin.Tree.IOptionName OptionName {
      get
      {
        CompositeElement current = this;  
    
        JetBrains.ReSharper.PsiPlugin.Tree.IOptionName result = null;
        TreeElement current0 = current.FindChildByRole (JetBrains.ReSharper.PsiPlugin.Tree.Impl.OptionDefinition.PSI_OPTION_NAME);
        if (current0 != null) {
          result = (JetBrains.ReSharper.PsiPlugin.Tree.IOptionName) current0;
        }
        return result;
      }
    }
    public virtual  JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue OptionStringValue {
      get
      {
        CompositeElement current = this;  
    
        JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue result = null;
        TreeElement current0 = current.FindChildByRole (JetBrains.ReSharper.PsiPlugin.Tree.Impl.OptionDefinition.PSI_OPTION_STRING_VALUE);
        if (current0 != null) {
          result = (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue) current0;
        }
        return result;
      }
    }
    public virtual JetBrains.ReSharper.PsiPlugin.Tree.IOptionName SetOptionName (JetBrains.ReSharper.PsiPlugin.Tree.IOptionName param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
        } else {
          if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_NAME) {
            if (param != null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              current = GetNextFilteredChild (next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            current = next;
          }
        }
        return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionName)result;
      }
    }
    public virtual JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue SetOptionStringValue (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue param)
    {
      using (JetBrains.Application.WriteLockCookie.Create (this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild (current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
        } else {
          if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_NAME) {
            current = next;
          } else {
            return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
          } else {
            if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
              if (param != null) {
                current = next;
              } else {
                current = GetNextFilteredChild (next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
              }
            } else {
              return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
            }
          }
          next = GetNextFilteredChild (current);
          if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_STRING_VALUE) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_STRING_VALUE) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
          else {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
        }
        else if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
          } else {
            if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON) {
              if (param != null) {
                current = next;
              } else {
                current = GetNextFilteredChild (next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
              }
            } else {
              return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
            }
          }
          next = GetNextFilteredChild (current);
          if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS) {
                if (param != null) {
                  current = next;
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
              }
            }
            next = GetNextFilteredChild (current);
            if (next == null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_NAME) {
                if (param != null) {
                  current = next;
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
              }
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
                if (param != null) {
                  current = next;
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
              }
            }
            next = GetNextFilteredChild (current);
            if (next == null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL) {
                if (param != null) {
                  current = next;
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
              }
            }
            next = GetNextFilteredChild (current);
            if (next == null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_NAME) {
                if (param != null) {
                  current = next;
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
              }
            }
            while(next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON) {
              next = GetNextFilteredChild (current);
              if (next == null) {
                result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
              } else {
                if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON) {
                  if (param != null) {
                    current = next;
                  } else {
                    current = GetNextFilteredChild (next);
                    JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                  }
                } else {
                  return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
                }
              }
              next = GetNextFilteredChild (current);
              if (next == null) {
                result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
              } else {
                if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL) {
                  if (param != null) {
                    current = next;
                  } else {
                    current = GetNextFilteredChild (next);
                    JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                  }
                } else {
                  return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
                }
              }
              next = GetNextFilteredChild (current);
              if (next == null) {
                result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
              } else {
                if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_NAME) {
                  if (param != null) {
                    current = next;
                  } else {
                    current = GetNextFilteredChild (next);
                    JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                  }
                } else {
                  return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
                }
              }
            }
            next = GetNextFilteredChild (current);
            if (next == null) {
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RPARENTH) {
                if (param != null) {
                  current = next;
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
              }
            }
          }
          else {
            // in case we have multiple lookahead elements and we've failed to find any
            return null;
          }
        }
        else {
          next = GetNextFilteredChild (current);
          if (next == null) {
            result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, TreeElementFactory.CreateErrorElement (string.Empty));
          } else {
            if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
              if (param != null) {
                current = next;
              } else {
                current = GetNextFilteredChild (next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
              }
            } else {
              return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
            }
          }
          next = GetNextFilteredChild (current);
          if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_STRING_VALUE) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_STRING_VALUE) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL) {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
          else {
            next = GetNextFilteredChild (current);
            if (next == null) {
              if (param == null) return null;
              result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter (this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
            } else {
              if (next.NodeType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
                if (param != null) {
                  result = current = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                } else {
                  current = GetNextFilteredChild (next);
                  JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild (next);
                }
              } else {
                if (param == null) return null;
                result = (TreeElement)JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode)param);
                current = next;
              }
            }
          }
        }
        return (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)result;
      }
    }
    public override string ToString() {
      return "IOptionDefinition";
    }
  }
}
