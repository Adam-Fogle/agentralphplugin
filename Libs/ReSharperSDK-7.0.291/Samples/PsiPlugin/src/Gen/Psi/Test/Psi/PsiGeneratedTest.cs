//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using System.IO;
using JetBrains.ReSharper.Psi.Parsing;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
namespace JetBrains.ReSharper.PsiPlugin.Tree.Impl
{
  public partial class PsiGeneratedGetterTestUtil : PsiGetterTestUtil
  {
      internal static void TestAfterQuote (int level, JetBrains.ReSharper.PsiPlugin.Tree.IAfterQuote param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestChoiceTail (int level, JetBrains.ReSharper.PsiPlugin.Tree.IChoiceTail param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.PsiPlugin.Tree.ISequence child = ((JetBrains.ReSharper.PsiPlugin.Tree.IChoiceTail)param).Sequence;
        TestSequence (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.ISequence)child, "Sequence");
      }
    }
      internal static void TestExtraDefinition (int level, JetBrains.ReSharper.PsiPlugin.Tree.IExtraDefinition param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IPathValue child = ((JetBrains.ReSharper.PsiPlugin.Tree.IExtraDefinition)param).PathValue;
        TestPathValue (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IPathValue)child, "PathValue");
      }
    }
      internal static void TestExtrasDefinition (int level, JetBrains.ReSharper.PsiPlugin.Tree.IExtrasDefinition param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestInterfacesDefinition (int level, JetBrains.ReSharper.PsiPlugin.Tree.IInterfacesDefinition param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestListExpression (int level, JetBrains.ReSharper.PsiPlugin.Tree.IListExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestModifier (int level, JetBrains.ReSharper.PsiPlugin.Tree.IModifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestNotChoiceExpression (int level, JetBrains.ReSharper.PsiPlugin.Tree.INotChoiceExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestOptionDefinition (int level, JetBrains.ReSharper.PsiPlugin.Tree.IOptionDefinition param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.Psi.Tree.ITokenNode child = ((JetBrains.ReSharper.PsiPlugin.Tree.IOptionDefinition)param).OptionIdentifierValue;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.Tree.ITokenNode)child, "OptionIdentifierValue");
      }
      {
        JetBrains.ReSharper.Psi.Tree.ITokenNode child = ((JetBrains.ReSharper.PsiPlugin.Tree.IOptionDefinition)param).OptionIntegerValue;
        TestTokenNode (level + 1, (JetBrains.ReSharper.Psi.Tree.ITokenNode)child, "OptionIntegerValue");
      }
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IOptionName child = ((JetBrains.ReSharper.PsiPlugin.Tree.IOptionDefinition)param).OptionName;
        TestOptionName (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IOptionName)child, "OptionName");
      }
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue child = ((JetBrains.ReSharper.PsiPlugin.Tree.IOptionDefinition)param).OptionStringValue;
        TestOptionStringValue (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue)child, "OptionStringValue");
      }
    }
      internal static void TestOptionName (int level, JetBrains.ReSharper.PsiPlugin.Tree.IOptionName param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestOptionStringValue (int level, JetBrains.ReSharper.PsiPlugin.Tree.IOptionStringValue param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestOptionsDefinition (int level, JetBrains.ReSharper.PsiPlugin.Tree.IOptionsDefinition param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestParenExpression (int level, JetBrains.ReSharper.PsiPlugin.Tree.IParenExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPathDeclaration (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPathDeclaration param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IPathName child = ((JetBrains.ReSharper.PsiPlugin.Tree.IPathDeclaration)param).PathName;
        TestPathName (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IPathName)child, "PathName");
      }
    }
      internal static void TestPathElement (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPathElement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IRoleName child = ((JetBrains.ReSharper.PsiPlugin.Tree.IPathElement)param).RoleName;
        TestRoleName (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IRoleName)child, "RoleName");
      }
    }
      internal static void TestPathName (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPathName param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPathValue (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPathValue param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPathsDeclaration (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPathsDeclaration param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPredicated (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPredicated param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPsiExpression (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPsiExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPsiFile (int level, JetBrains.ReSharper.PsiPlugin.Tree.IPsiFile param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IInterfacesDefinition child = ((JetBrains.ReSharper.PsiPlugin.Tree.IPsiFile)param).Interfaces;
        TestInterfacesDefinition (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IInterfacesDefinition)child, "Interfaces");
      }
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IPathsDeclaration child = ((JetBrains.ReSharper.PsiPlugin.Tree.IPsiFile)param).Paths;
        TestPathsDeclaration (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IPathsDeclaration)child, "Paths");
      }
    }
      internal static void TestQuantifier (int level, JetBrains.ReSharper.PsiPlugin.Tree.IQuantifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRoleGetterParameter (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRoleGetterParameter param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRoleName (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRoleName param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleAngleParameters (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleAngleParameters param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleBody (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleBody param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleBraceParameters (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleBraceParameters param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleBracketParameters (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleBracketParameters param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleBracketTypedParameters (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleBracketTypedParameters param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleDeclaration (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaration param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IRuleBody child = ((JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaration)param).Body;
        TestRuleBody (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IRuleBody)child, "Body");
      }
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IExtrasDefinition child = ((JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaration)param).Extras;
        TestExtrasDefinition (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IExtrasDefinition)child, "Extras");
      }
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IRuleBracketTypedParameters child = ((JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaration)param).Parameters;
        TestRuleBracketTypedParameters (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IRuleBracketTypedParameters)child, "Parameters");
      }
      {
        JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaredName child = ((JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaration)param).RuleName;
        TestRuleDeclaredName (level + 1, (JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaredName)child, "RuleName");
      }
    }
      internal static void TestRuleDeclaredName (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleDeclaredName param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleName (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleName param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestRuleParameters (int level, JetBrains.ReSharper.PsiPlugin.Tree.IRuleParameters param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSequence (int level, JetBrains.ReSharper.PsiPlugin.Tree.ISequence param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSharpExpression (int level, JetBrains.ReSharper.PsiPlugin.Tree.ISharpExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSimpleExpression (int level, JetBrains.ReSharper.PsiPlugin.Tree.ISimpleExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestVariableDeclaration (int level, JetBrains.ReSharper.PsiPlugin.Tree.IVariableDeclaration param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestVariableName (int level, JetBrains.ReSharper.PsiPlugin.Tree.IVariableName param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
    }
}
