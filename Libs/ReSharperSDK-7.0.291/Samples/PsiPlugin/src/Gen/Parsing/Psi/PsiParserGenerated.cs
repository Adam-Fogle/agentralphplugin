//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI;
using JetBrains.ReSharper.PsiPlugin.Tree.Impl;
namespace JetBrains.ReSharper.PsiPlugin.Parsing {
  internal abstract class PsiParserGenerated : JetBrains.ReSharper.Psi.Parsing.GeneratedParserBase<JetBrains.ReSharper.Psi.Parsing.ILexer> 
  {
    public PsiParserGenerated() {}
    protected ParsingContext myCurrentContext = ParsingContext.UNDEFINED;
    protected enum ParsingContext : short {
      UNDEFINED
    }
    protected class ParsingContextAttribute : System.Attribute {
      private ParsingContext myParsingContext;
      public ParsingContextAttribute (ParsingContext context) {
        myParsingContext = context;
      }
      public ParsingContext ParsingContext {
        get {
          return myParsingContext;
        }
      }
    }
    protected bool IsInFollow (JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) {
      switch (myCurrentContext) {
        case ParsingContext.UNDEFINED: return false;
        default:
        throw new System.InvalidOperationException("Unknown context");
        return false;
      }
    }
    protected virtual TreeElement match(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) {
      if (myLexer.TokenType != tokenType) {
        var tokenRepr = tokenType.TokenRepresentation;
        if (string.IsNullOrEmpty(tokenRepr))
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (JetBrains.ReSharper.PsiPlugin.Parsing.ParserMessages.GetExpectedMessage(tokenType.ToString()));
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (JetBrains.ReSharper.PsiPlugin.Parsing.ParserMessages.GetExpectedMessage(tokenRepr));
      }
      return createToken();
    }
    protected void skip(CompositeElement parent) {
      parent.AppendNewChild (createToken());
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseAfterQuote () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.AFTER_QUOTE);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseChoiceTail () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.CHOICE_TAIL);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OR);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseSequence();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExtraDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.EXTRA_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GET);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePathValue();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RETURN_TYPE) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RETURN_TYPE);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ISCACHED) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ISCACHED);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GET
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage0());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExtraDefinition (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInExtraDefinition (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GET
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseExtrasDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.EXTRAS_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXTRAS);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GET) {
          tempParsingResult = parseExtraDefinition();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage1());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInExtrasDefinition (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInExtrasDefinition (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseInterfacesDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.INTERFACES_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTERFACES);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_0 [tokenType]) {
          tempParsingResult = parseRuleDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseListExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.LIST_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LIST_KEYWORD);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
          tempParsingResult = parseParenExpression();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseRuleName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseAfterQuote();
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT) {
            tempParsingResult = parseRuleParameters();
            result.AppendNewChild (tempParsingResult);
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage2());
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEP_KEYWORD);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
          tempParsingResult = parseParenExpression();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseRuleName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseAfterQuote();
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT) {
            tempParsingResult = parseRuleParameters();
            result.AppendNewChild (tempParsingResult);
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage3());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_1 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage4());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInListExpression (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInListExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_1 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseModifier () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.MODIFIER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ERRORHANDLING) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ERRORHANDLING);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTERFACE) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTERFACE);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PRIVATE) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PRIVATE);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ABSTRACT) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ABSTRACT);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage5());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseNotChoiceExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.NOT_CHOICE_EXPRESSION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AND
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXCL) {
          tempParsingResult = parsePredicated();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LIST_KEYWORD
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
          tempParsingResult = parseSimpleExpression();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ASTERISK
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.QUEST) {
            tempParsingResult = parseQuantifier();
            result.AppendNewChild (tempParsingResult);
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage6());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual void parseOptionColonDefinition (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseRuleName();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseRuleName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseRuleName();
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
          }
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RPARENTH);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage7());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOptionDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_DEFINITION);
        tempParsingResult = parseOptionName();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
            parseOptionEqDefinition(result);
          } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON) {
            parseOptionColonDefinition(result);
          } else {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage8());
          }
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage9());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInOptionDefinition (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInOptionDefinition (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual void parseOptionEqDefinition (CompositeElement result) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try {
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL) {
          tempParsingResult = parseOptionStringValue();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTEGER_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage10());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        throw;
      }
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOptionName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_NAME);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage11());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOptionStringValue () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTION_STRING_VALUE);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseOptionsDefinition () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.OPTIONS_DEFINITION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OPTIONS);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL) {
          tempParsingResult = parseOptionDefinition();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_2 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage12());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInOptionsDefinition (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInOptionsDefinition (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_2 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseParenExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PAREN_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_3 [tokenType]) {
          tempParsingResult = parsePsiExpression();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SHARP) {
          tempParsingResult = parseSharpExpression();
          result.AppendNewChild (tempParsingResult);
        } else {
          tempParsingResult = parsePsiExpression();
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RPARENTH);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePathDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PATH_DECLARATION);
        tempParsingResult = parsePathName();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePathValue();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage13());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInPathDeclaration (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInPathDeclaration (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePathElement () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PATH_ELEMENT);
        tempParsingResult = parsePathName();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseRoleName();
          result.AppendNewChild (tempParsingResult);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePathName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PATH_NAME);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePathValue () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PATH_VALUE);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parsePathElement();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.DIV) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.DIV);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parsePathElement();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GT);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePathsDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PATHS_DECLARATION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PATHS);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parsePathDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePredicated () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PREDICATED);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXCL) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXCL);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseSimpleExpression();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ASTERISK
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.QUEST) {
            tempParsingResult = parseQuantifier();
            result.AppendNewChild (tempParsingResult);
          }
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AND) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AND);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseVariableName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT) {
            tempParsingResult = parseRuleParameters();
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ASTERISK
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.QUEST) {
            tempParsingResult = parseQuantifier();
            result.AppendNewChild (tempParsingResult);
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage14());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePsiExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PSI_EXPRESSION);
        tempParsingResult = parseSequence();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OR) {
          tempParsingResult = parseChoiceTail();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parsePsiFile () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.PSI_FILE);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OPTIONS) {
          tempParsingResult = parseOptionsDefinition();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PATHS) {
          tempParsingResult = parsePathsDeclaration();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_0 [tokenType]) {
          tempParsingResult = parseRuleDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.INTERFACES) {
          tempParsingResult = parseInterfacesDefinition();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage15());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInPsiFile (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInPsiFile (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseQuantifier () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.QUANTIFIER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ASTERISK) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ASTERISK);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.QUEST) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.QUEST);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.PLUS);
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage16());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRoleGetterParameter () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.ROLE_GETTER_PARAMETER);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ROLE_KEYWORD) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ROLE_KEYWORD);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GETTER);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage17());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInRoleGetterParameter (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInRoleGetterParameter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_4 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRoleName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.ROLE_NAME);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleAngleParameters () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_ANGLE_PARAMETERS);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AT) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AT);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ROLE_KEYWORD);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AT);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GETTER);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ROLE_KEYWORD) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ROLE_KEYWORD);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GETTER);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseRoleName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
          while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.CACHED
              ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
              tokenType = myLexer.TokenType;
              if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
                result.AppendNewChild (tempParsingResult);
              } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.CACHED) {
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.CACHED);
                result.AppendNewChild (tempParsingResult);
              } else {
                if (result.firstChild == null) result = null;
                throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage18());
              }
              tokenType = myLexer.TokenType;
              if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
                result.AppendNewChild (tempParsingResult);
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
                result.AppendNewChild (tempParsingResult);
              }
            } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ISCACHED) {
              tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ISCACHED);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage19());
            }
            tokenType = myLexer.TokenType;
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage20());
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GT);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleBody () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_BODY);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_3 [tokenType]) {
          tempParsingResult = parsePsiExpression();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage21());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInRuleBody (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInRuleBody (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleBraceParameters () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_BRACE_PARAMETERS);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AT) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AT);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ROLE_KEYWORD);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.AT);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.GETTER);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseRoleName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
          while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
            result.AppendNewChild (tempParsingResult);
            tokenType = myLexer.TokenType;
            if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.CACHED
              ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
              tokenType = myLexer.TokenType;
              if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
                result.AppendNewChild (tempParsingResult);
              } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.CACHED) {
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.CACHED);
                result.AppendNewChild (tempParsingResult);
              } else {
                if (result.firstChild == null) result = null;
                throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage22());
              }
              tokenType = myLexer.TokenType;
              if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ) {
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EQ);
                result.AppendNewChild (tempParsingResult);
                tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.STRING_LITERAL);
                result.AppendNewChild (tempParsingResult);
              }
            } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ISCACHED) {
              tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.ISCACHED);
              result.AppendNewChild (tempParsingResult);
            } else {
              if (result.firstChild == null) result = null;
              throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage23());
            }
            tokenType = myLexer.TokenType;
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage24());
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACE);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleBracketParameters () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_BRACKET_PARAMETERS);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.NULL_KEYWORD) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.NULL_KEYWORD);
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseVariableName();
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage25());
        }
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.NULL_KEYWORD) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.NULL_KEYWORD);
            result.AppendNewChild (tempParsingResult);
          } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
            tempParsingResult = parseVariableName();
            result.AppendNewChild (tempParsingResult);
          } else {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage26());
          }
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACKET);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleBracketTypedParameters () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_BRACKET_TYPED_PARAMETERS);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseRuleName();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseVariableDeclaration();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COMMA);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseRuleName();
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseVariableDeclaration();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.RBRACKET);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXTRAS
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OPTIONS)  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage27());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInRuleBracketTypedParameters (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInRuleBracketTypedParameters (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !(tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXTRAS
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OPTIONS)  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_DECLARATION);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_5 [tokenType]) {
          tempParsingResult = parseModifier();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tempParsingResult = parseRuleDeclaredName();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE) {
          tempParsingResult = parseRoleGetterParameter();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET) {
          tempParsingResult = parseRuleBracketTypedParameters();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.OPTIONS) {
          tempParsingResult = parseOptionsDefinition();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.EXTRAS) {
          tempParsingResult = parseExtrasDefinition();
          result.AppendNewChild (tempParsingResult);
        }
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseRuleBody();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SEMICOLON);
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_6 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage28());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInRuleDeclaration (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInRuleDeclaration (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_6 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleDeclaredName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_DECLARED_NAME);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_NAME);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseRuleParameters () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.RULE_PARAMETERS);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT) {
          tempParsingResult = parseRuleAngleParameters();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET) {
            tempParsingResult = parseRuleBracketParameters();
            result.AppendNewChild (tempParsingResult);
          }
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE) {
          tempParsingResult = parseRuleBraceParameters();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET) {
            tempParsingResult = parseRuleBracketParameters();
            result.AppendNewChild (tempParsingResult);
          }
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET) {
          tempParsingResult = parseRuleBracketParameters();
          result.AppendNewChild (tempParsingResult);
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage29());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_7 [tokenType])  ) {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure (ErrorMessages.GetErrorMessage30());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        if (result != null) {
          handleErrorInRuleParameters (result, e);
        } else {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement handleErrorInRuleParameters (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error) {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement) {
        errorElement = result;
      }
      else {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while(tokenType != null  && !( TokenBitsets.TokenBitset_7 [tokenType])  && !IsInFollow(tokenType)  ) {
        skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseSequence () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.SEQUENCE);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_8 [tokenType]) {
          tempParsingResult = parseNotChoiceExpression();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseSharpExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.SHARP_EXPRESSION);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.SHARP);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseVariableDeclaration();
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.COLON);
        result.AppendNewChild (tempParsingResult);
        tempParsingResult = parseRuleName();
        result.AppendNewChild (tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE) {
          tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE);
          result.AppendNewChild (tempParsingResult);
          tempParsingResult = parseAfterQuote();
          result.AppendNewChild (tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET
          ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT) {
          tempParsingResult = parseRuleParameters();
          result.AppendNewChild (tempParsingResult);
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseSimpleExpression () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.SIMPLE_EXPRESSION);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LPARENTH) {
          tempParsingResult = parseParenExpression();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LIST_KEYWORD) {
          tempParsingResult = parseListExpression();
          result.AppendNewChild (tempParsingResult);
        } else if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER) {
          tempParsingResult = parseRuleName();
          result.AppendNewChild (tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE) {
            tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.BACK_QUOTE);
            result.AppendNewChild (tempParsingResult);
            tempParsingResult = parseAfterQuote();
            result.AppendNewChild (tempParsingResult);
          }
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACE
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LBRACKET
            ||tokenType == JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.LT) {
            tempParsingResult = parseRuleParameters();
            result.AppendNewChild (tempParsingResult);
          }
        } else {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (ErrorMessages.GetErrorMessage31());
        }
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseVariableDeclaration () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.VARIABLE_DECLARATION);
        tempParsingResult = parseVariableName();
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement parseVariableName () {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try {
        result = TreeElementFactory.CreateCompositeElement (JetBrains.ReSharper.PsiPlugin.Tree.Impl.ElementType.VARIABLE_NAME);
        tempParsingResult = match(JetBrains.ReSharper.PsiPlugin.Tree.Impl.TokenType.IDENTIFIER);
        result.AppendNewChild (tempParsingResult);
      } catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e) {
        if (e.ParsingResult != null && result != null) {
          result.AppendNewChild (e.ParsingResult);
        }
        if (result != null) {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
  }
}
